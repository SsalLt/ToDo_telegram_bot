from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import logger
import app.keyboards as kb
import app.database.requests_db as rq

router = Router()


class AddTaskState(StatesGroup):
    task_text = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await rq.set_user(tg_id=message.from_user.id)
    await state.clear()
    await message.answer(
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
        reply_markup=kb.main)


@router.message(F.text == "–ù–∞–∑–∞–¥ ‚Ü©")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main)
    logger.debug('back_to_main command')


@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
@router.message(Command("add"))
async def add_task(message: Message, state: FSMContext):
    await state.set_state(AddTaskState.task_text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:", reply_markup=kb.back_to_main)
    logger.debug('add_task command')


@router.message(AddTaskState.task_text)
async def task_text_process(message: Message, state: FSMContext):
    logger.debug('task_text_process command')
    await state.update_data(task_text=message.text)
    state_data: dict = await state.get_data()
    await rq.set_task(tg_id=message.from_user.id, task=state_data.get("task_text"))
    await message.reply(text=f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main)
    await state.clear()


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
@router.message(Command('list_tasks'))
async def list_tasks(message: Message, state: FSMContext):
    user_tg_id = message.from_user.id
    tasks = await kb.tasks(tg_id=user_tg_id)
    if tasks is None:
        await message.answer(text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏!\n"
                                  "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π.")
        return
    await message.answer(text="–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:",
                         reply_markup=tasks)
